name: release

on:
  workflow_dispatch:

env:
  TZ: Europe/Zurich
  CARGO_TERM_COLOR: always

jobs:
  build-test-release:
    runs-on: ubuntu-latest
    environment: release
    permissions:
      contents: write
      packages: write
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          components: rustfmt, clippy
          target: x86_64-unknown-linux-musl

      - uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - run: which cargo-get ||cargo install cargo-get
      - name: set the current release version
        run: |
          BASE_VERSION=$(cargo get package.version --major --minor --delimiter=".")
          echo "VERSION=${BASE_VERSION}.${{ github.run_number }}" >> $GITHUB_ENV

      - run: sudo apt update && sudo apt install musl-tools -y
      - run: curl -L --proto '=https' --tlsv1.2 -sSf https://raw.githubusercontent.com/cargo-bins/cargo-binstall/main/install-from-binstall-release.sh | bash
      - run: cargo binstall -y cross
      - run: cargo clippy

      - name: sanity check - debug build and tests
        run: cross test --target x86_64-unknown-linux-musl && cargo clean

      - name: build the release binaries for x86_64 and aarch64
        run: |
          mkdir -p ./binaries
          cross build --target x86_64-unknown-linux-musl --release && mv ./target/x86_64-unknown-linux-musl/release/healthcheck ./binaries/healthcheck.x86_64
          cargo clean
          cross build --target aarch64-unknown-linux-musl --release && mv ./target/aarch64-unknown-linux-musl/release/healthcheck ./binaries/healthcheck.aarch64

      - uses: docker/setup-qemu-action@v3
      - uses: docker/setup-buildx-action@v3
      - uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - uses: docker/build-push-action@v6
        with:
          platforms: linux/amd64,linux/arm64
          file: ${{ github.workspace }}/.build/images/Dockerfile
          context: ./binaries
          push: true
          provenance: false
          sbom: true
          labels: |
            org.opencontainers.image.source=https://github.com/${{ github.repository_owner }}/distroless-http-healthcheck
            org.opencontainers.image.version=${{ env.VERSION }}
            org.opencontainers.image.ref.name=${{ github.ref_name }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.authors=https://github.com/${{ github.repository_owner }}
            org.opencontainers.image.description=A tiny HTTP client for distroless container health checks.
            org.opencontainers.image.url=https://github.com/${{ github.repository_owner }}/distroless-http-healthcheck
          tags: |
            ghcr.io/${{ github.repository_owner }}/distroless-http-healthcheck:latest
            ghcr.io/${{ github.repository_owner }}/distroless-http-healthcheck:${{ env.VERSION }}

      - name: publish the release binaries as a part of the Github release
        run: |
          gh release create --latest \
            -t "healthcheck v${{ env.VERSION}}" \
            ${{ env.VERSION }} \
            ./binaries/healthcheck*
        env:
          GH_TOKEN: ${{ github.token }}
